# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  solution: 'AppDeployAzure/AppDeployAzure.sln' 
  projectPath: 'AppDeployAzure' 
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'acrapiprjcloud'
  dockerRepository: 'prj-api-cloud'
  dockerfilePath: 'AppDeployAzure/Dockerfile.yml'

steps:

# ‚úÖ Garante que o c√≥digo seja baixado corretamente
- checkout: self

# ‚úÖ Debug: Verificar se os arquivos do projeto est√£o no lugar correto
- script: ls -R $(Build.SourcesDirectory)
  displayName: 'üîç Listar todos os arquivos baixados'

- script: ls -R $(Build.SourcesDirectory)/$(projectPath)
  displayName: 'üîç Listar arquivos dentro da pasta do projeto'

# ‚úÖ Instalar .NET SDK
- task: UseDotNet@2
  displayName: 'Instalar .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'

# ‚úÖ Restaurar pacotes antes de instalar qualquer coisa
- script: |
    cd $(projectPath)
    dotnet restore
  displayName: 'Restaurar Depend√™ncias'

# ‚úÖ Verificar se os pacotes NuGet est√£o corretos
- script: |
    dotnet nuget locals all --list
  displayName: 'üîç Verificar pacotes NuGet'

# ‚úÖ Compilar solu√ß√£o
- script: |
    cd $(projectPath)
    dotnet build --configuration $(buildConfiguration)
  displayName: 'Compilar Solu√ß√£o'

# ‚úÖ Build e Push da Imagem Docker
- task: Docker@2
  displayName: 'Build e Push da Imagem Docker'
  inputs:
    command: 'buildAndPush'
    repository: $(dockerRepository)
    Dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
 

